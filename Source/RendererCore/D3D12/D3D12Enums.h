#ifndef RENDERING_D3D12_D3D12ENUMS_H_
#define RENDERING_D3D12_D3D12ENUMS_H_

inline DXGI_FORMAT ResourceFormatToDXGIFormat(ResourceFormat format)
{
	switch (format)
	{
		case RESOURCE_FORMAT_UNDEFINED:
			return DXGI_FORMAT_UNKNOWN;
		// Tiny packed formats
		case RESOURCE_FORMAT_B4G4R4A4_UNORM_PACK16:
			return DXGI_FORMAT_B4G4R4A4_UNORM;
		case RESOURCE_FORMAT_B5G6R5_UNORM_PACK16:
			return DXGI_FORMAT_B5G6R5_UNORM;
		case RESOURCE_FORMAT_B5G5R5A1_UNORM_PACK16:
			return DXGI_FORMAT_B5G5R5A1_UNORM;
		// r8 formats
		case RESOURCE_FORMAT_R8_UNORM:
			return DXGI_FORMAT_R8_UNORM;
		case RESOURCE_FORMAT_R8_SNORM:
			return DXGI_FORMAT_R8_SNORM;
		case RESOURCE_FORMAT_R8_UINT:
			return DXGI_FORMAT_R8_UINT;
		case RESOURCE_FORMAT_R8_SINT:
			return DXGI_FORMAT_R8_SINT;
		// r8g8 formats
		case RESOURCE_FORMAT_R8G8_UNORM:
			return DXGI_FORMAT_R8G8_UNORM;
		case RESOURCE_FORMAT_R8G8_SNORM:
			return DXGI_FORMAT_R8G8_SNORM;
		case RESOURCE_FORMAT_R8G8_UINT:
			return DXGI_FORMAT_R8G8_UINT;
		case RESOURCE_FORMAT_R8G8_SINT:
			return DXGI_FORMAT_R8G8_SINT;
		// There aren't any 24-bit rgb formats in DXGI
		// r8g8b8a8 formats
		case RESOURCE_FORMAT_R8G8B8A8_UNORM:
			return DXGI_FORMAT_R8G8B8A8_UNORM;
		case RESOURCE_FORMAT_R8G8B8A8_SNORM:
			return DXGI_FORMAT_R8G8B8A8_SNORM;
		case RESOURCE_FORMAT_R8G8B8A8_UINT:
			return DXGI_FORMAT_R8G8B8A8_UINT;
		case RESOURCE_FORMAT_R8G8B8A8_SINT:
			return DXGI_FORMAT_R8G8B8A8_SINT;
		case RESOURCE_FORMAT_R8G8B8A8_SRGB:
			return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
		// b8g8r8a8 formats
		case RESOURCE_FORMAT_B8G8R8A8_UNORM:
			return DXGI_FORMAT_B8G8R8A8_UNORM;
		case RESOURCE_FORMAT_B8G8R8A8_SRGB:
			return DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;
		// a2r10g10b10 formats
		case RESOURCE_FORMAT_A2R10G10B10_UNORM_PACK32:
			return DXGI_FORMAT_R10G10B10A2_UNORM;
		case RESOURCE_FORMAT_A2R10G10B10_UINT_PACK32:
			return DXGI_FORMAT_R10G10B10A2_UINT;
		// r16 formats
		case RESOURCE_FORMAT_R16_UNORM:
			return DXGI_FORMAT_R16_UNORM;
		case RESOURCE_FORMAT_R16_SNORM:
			return DXGI_FORMAT_R16_SNORM;
		case RESOURCE_FORMAT_R16_UINT:
			return DXGI_FORMAT_R16_UINT;
		case RESOURCE_FORMAT_R16_SINT:
			return DXGI_FORMAT_R16_SINT;
		case RESOURCE_FORMAT_R16_SFLOAT:
			return DXGI_FORMAT_R16_FLOAT;
		//r16g16 formats
		case RESOURCE_FORMAT_R16G16_UNORM:
			return DXGI_FORMAT_R16G16_UNORM;
		case RESOURCE_FORMAT_R16G16_SNORM:
			return DXGI_FORMAT_R16G16_SNORM;
		case RESOURCE_FORMAT_R16G16_UINT:
			return DXGI_FORMAT_R16G16_UINT;
		case RESOURCE_FORMAT_R16G16_SINT:
			return DXGI_FORMAT_R16G16_SINT;
		case RESOURCE_FORMAT_R16G16_SFLOAT:
			return DXGI_FORMAT_R16G16_FLOAT;
		// There aren't any 48-bit formats in DXGI (R16G16B16)
		// r16g16b16a16 formats
		case RESOURCE_FORMAT_R16G16B16A16_UNORM:
			return DXGI_FORMAT_R16G16B16A16_UNORM;
		case RESOURCE_FORMAT_R16G16B16A16_SNORM:
			return DXGI_FORMAT_R16G16B16A16_SNORM;
		case RESOURCE_FORMAT_R16G16B16A16_UINT:
			return DXGI_FORMAT_R16G16B16A16_UINT;
		case RESOURCE_FORMAT_R16G16B16A16_SINT:
			return DXGI_FORMAT_R16G16B16A16_SINT;
		case RESOURCE_FORMAT_R16G16B16A16_SFLOAT:
			return DXGI_FORMAT_R16G16B16A16_FLOAT;
		// r32 formats
		case RESOURCE_FORMAT_R32_UINT:
			return DXGI_FORMAT_R32_UINT;
		case RESOURCE_FORMAT_R32_SINT:
			return DXGI_FORMAT_R32_SINT;
		case RESOURCE_FORMAT_R32_SFLOAT:
			return DXGI_FORMAT_R32_FLOAT;
		// r32g32 formats
		case RESOURCE_FORMAT_R32G32_UINT:
			return DXGI_FORMAT_R32G32_UINT;
		case RESOURCE_FORMAT_R32G32_SINT:
			return DXGI_FORMAT_R32G32_SINT;
		case RESOURCE_FORMAT_R32G32_SFLOAT:
			return DXGI_FORMAT_R32G32_FLOAT;
		// r32g32b32 formats
		case RESOURCE_FORMAT_R32G32B32_UINT:
			return DXGI_FORMAT_R32G32B32_UINT;
		case RESOURCE_FORMAT_R32G32B32_SINT:
			return DXGI_FORMAT_R32G32B32_SINT;
		case RESOURCE_FORMAT_R32G32B32_SFLOAT:
			return DXGI_FORMAT_R32G32B32_FLOAT;
		// r32g32b32a32 formats
		case RESOURCE_FORMAT_R32G32B32A32_UINT:
			return DXGI_FORMAT_R32G32B32A32_UINT;
		case RESOURCE_FORMAT_R32G32B32A32_SINT:
			return DXGI_FORMAT_R32G32B32A32_SINT;
		case RESOURCE_FORMAT_R32G32B32A32_SFLOAT:
			return DXGI_FORMAT_R32G32B32A32_FLOAT;
		// Some packed formats
		case RESOURCE_FORMAT_B10G11R11_UFLOAT_PACK32:
			return DXGI_FORMAT_R11G11B10_FLOAT;
		case RESOURCE_FORMAT_E5B9G9R9_UFLOAT_PACK32:
			return DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
		// Depth formats
		case RESOURCE_FORMAT_D16_UNORM:
			return DXGI_FORMAT_D16_UNORM;
		case RESOURCE_FORMAT_D32_SFLOAT:
			return DXGI_FORMAT_D32_FLOAT;
		case RESOURCE_FORMAT_D24_UNORM_S8_UINT:
			return DXGI_FORMAT_D24_UNORM_S8_UINT;
		// Block compression textures
		case RESOURCE_FORMAT_BC1_RGBA_UNORM_BLOCK:
			return DXGI_FORMAT_BC1_UNORM;
		case RESOURCE_FORMAT_BC1_RGBA_SRGB_BLOCK:
			return DXGI_FORMAT_BC1_UNORM_SRGB;
		case RESOURCE_FORMAT_BC2_UNORM_BLOCK:
			return DXGI_FORMAT_BC2_UNORM;
		case RESOURCE_FORMAT_BC2_SRGB_BLOCK:
			return DXGI_FORMAT_BC2_UNORM_SRGB;
		case RESOURCE_FORMAT_BC3_UNORM_BLOCK:
			return DXGI_FORMAT_BC3_UNORM;
		case RESOURCE_FORMAT_BC3_SRGB_BLOCK:
			return DXGI_FORMAT_BC3_UNORM_SRGB;
		case RESOURCE_FORMAT_BC4_UNORM_BLOCK:
			return DXGI_FORMAT_BC4_SNORM;
		case RESOURCE_FORMAT_BC4_SNORM_BLOCK:
			return DXGI_FORMAT_BC4_SNORM;
		case RESOURCE_FORMAT_BC5_UNORM_BLOCK:
			return DXGI_FORMAT_BC5_UNORM;
		case RESOURCE_FORMAT_BC5_SNORM_BLOCK:
			return DXGI_FORMAT_BC5_SNORM;
		case RESOURCE_FORMAT_BC6H_UFLOAT_BLOCK:
			return DXGI_FORMAT_BC6H_UF16;
		case RESOURCE_FORMAT_BC6H_SFLOAT_BLOCK:
			return DXGI_FORMAT_BC6H_SF16;
		case RESOURCE_FORMAT_BC7_UNORM_BLOCK:
			return DXGI_FORMAT_BC7_UNORM;
		case RESOURCE_FORMAT_BC7_SRGB_BLOCK:
			return DXGI_FORMAT_BC7_UNORM_SRGB;
		default:
			return DXGI_FORMAT_UNKNOWN;
	}
}

#endif /* RENDERING_D3D12_D3D12ENUMS_H_ */